services:
  # discovery:
  #   image: yuri000/squad13:discovery
  #   # build:
  #   #   context: ..
  #   #   dockerfile: docker/dockerfiles/jdk21-distroless-gradle/Dockerfile
  #   #   args:
  #   #     SERVICE_NAME: discovery
  #   ports:
  #     - "12999:12999"
  #   environment:
  #     - SERVER_PORT=12999
  #     - EUREKA_HOSTNAME=discovery

  # gateway:
  #   image: yuri000/squad13:gateway
  #   # build:
  #   #   context: ..
  #   #   dockerfile: docker/dockerfiles/jdk21-distroless-gradle/Dockerfile
  #   #   args:
  #   #     SERVICE_NAME: gateway
  #   ports:
  #     - "13000:13000"
  #   environment:
  #     - SERVER_PORT=13000
  #     - EUREKA_HOST=http://discovery:12999/eureka/
  #   # - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:5173 | NÃ£o testado
  #   depends_on:
  #     - discovery

#  client:
#    build:
#      context: ..
#      dockerfile: docker/dockerfiles/react_vite_client/Dockerfile
#      args:
#        CLIENT_PATH: /front/FrontEnd-JotaNunes
#    ports:
#      - "13999:80"
#    volumes:
#      - ./logs/nginx-logs:/var/log/nginx

 
  monolito_api:
    build:
      context: ..
      dockerfile: docker/dockerfiles/jdk21-distroless-mvn/Dockerfile
      args:
        SERVICE_NAME: api-monolito
        PORT: 13000
    container_name: monolito_api
    depends_on:
      - monolito_db
    ports:
      - "13000:13000"
    environment:
      POSTGRES_URL: jdbc:postgresql://ep-gentle-queen-acl8zuhb-pooler.sa-east-1.aws.neon.tech/neondb
      POSTGRES_USER: neondb_owner
      POSTGRES_PASSWORD: npg_QlqXho46CISy
      SERVER_PORT: 13000
      SPRING_PROFILES_ACTIVE: docker
      MONGO_URI: mongodb+srv://S13:mjtbAvnoBRS9MDAq@monolito.wrvc4cl.mongodb.net/monolito?retryWrites=true&w=majority&appName=monolito
      ALLOWED_ORIGIN: "*"
      SECRET: secret-0000000000000000000000000000

  monolito_db:
    image: postgres:16
    container_name: monolito_db
    restart: always
    environment:
      POSTGRES_DB: monolito
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data

  mongo_db:
    image: mongo:latest
    container_name: mongo_db
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin
      MONGO_INITDB_DATABASE: monolito
    volumes:
      - mongo_data:/data/db


  # rabbitmq:
  #   image: rabbitmq:latest
  #   ports:
  #     - "5672:5672"
  #     - "15672:15672"
  #   environment:
  #     RABBITMQ_DEFAULT_USER: admin
  #     RABBITMQ_DEFAULT_PASS: admin
  #   volumes:
  #     - rabbitmq_data:/var/lib/rabbitmq

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./docker/prometheus:/etc/prometheus:ro
    ports:
      - "9090:9090"
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    depends_on:
      - monolito_db

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus

volumes:
  pg_data:
  grafana_data:
  mongo_data:
  # rabbitmq_data:
